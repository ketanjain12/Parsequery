"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RedisCacheAdapter = void 0;
var _redis = require("redis");
var _logger = _interopRequireDefault(require("../../logger"));
var _KeyPromiseQueue = require("../../KeyPromiseQueue");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DEFAULT_REDIS_TTL = 30 * 1000; // 30 seconds in milliseconds
const FLUSH_DB_KEY = '__flush_db__';
function debug(...args) {
  const message = ['RedisCacheAdapter: ' + arguments[0]].concat(args.slice(1, args.length));
  _logger.default.debug.apply(_logger.default, message);
}
const isValidTTL = ttl => typeof ttl === 'number' && ttl > 0;
class RedisCacheAdapter {
  constructor(redisCtx, ttl = DEFAULT_REDIS_TTL) {
    this.ttl = isValidTTL(ttl) ? ttl : DEFAULT_REDIS_TTL;
    this.client = (0, _redis.createClient)(redisCtx);
    this.queue = new _KeyPromiseQueue.KeyPromiseQueue();
    this.client.on('error', err => {
      _logger.default.error('RedisCacheAdapter client error', {
        error: err
      });
    });
    this.client.on('connect', () => {});
    this.client.on('reconnecting', () => {});
    this.client.on('ready', () => {});
  }
  async connect() {
    if (this.client.isOpen) {
      return;
    }
    return this.client.connect();
  }
  async handleShutdown() {
    if (!this.client) {
      return;
    }
    try {
      await this.client.quit();
    } catch (err) {
      _logger.default.error('RedisCacheAdapter error on shutdown', {
        error: err
      });
    }
  }
  async get(key) {
    debug('get', {
      key
    });
    try {
      await this.queue.enqueue(key);
      const res = await this.client.get(key);
      if (!res) {
        return null;
      }
      return JSON.parse(res);
    } catch (err) {
      _logger.default.error('RedisCacheAdapter error on get', {
        error: err
      });
    }
  }
  async put(key, value, ttl = this.ttl) {
    value = JSON.stringify(value);
    debug('put', {
      key,
      value,
      ttl
    });
    await this.queue.enqueue(key);
    if (ttl === 0) {
      // ttl of zero is a logical no-op, but redis cannot set expire time of zero
      return;
    }
    if (ttl === Infinity) {
      return this.client.set(key, value);
    }
    if (!isValidTTL(ttl)) {
      ttl = this.ttl;
    }
    return this.client.set(key, value, {
      PX: ttl
    });
  }
  async del(key) {
    debug('del', {
      key
    });
    await this.queue.enqueue(key);
    return this.client.del(key);
  }
  async clear() {
    debug('clear');
    await this.queue.enqueue(FLUSH_DB_KEY);
    return this.client.sendCommand(['FLUSHDB']);
  }

  // Used for testing
  getAllKeys() {
    return this.client.keys('*');
  }
}
exports.RedisCacheAdapter = RedisCacheAdapter;
var _default = exports.default = RedisCacheAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,