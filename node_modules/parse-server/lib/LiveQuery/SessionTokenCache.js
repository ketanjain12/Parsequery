"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SessionTokenCache = void 0;
var _node = _interopRequireDefault(require("parse/node"));
var _lruCache = require("lru-cache");
var _logger = _interopRequireDefault(require("../logger"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function userForSessionToken(sessionToken) {
  var q = new _node.default.Query('_Session');
  q.equalTo('sessionToken', sessionToken);
  return q.first({
    useMasterKey: true
  }).then(function (session) {
    if (!session) {
      return Promise.reject('No session found for session token');
    }
    return session.get('user');
  });
}
class SessionTokenCache {
  constructor(timeout = 30 * 24 * 60 * 60 * 1000, maxSize = 10000) {
    this.cache = new _lruCache.LRUCache({
      max: maxSize,
      ttl: timeout
    });
  }
  getUserId(sessionToken) {
    if (!sessionToken) {
      return Promise.reject('Empty sessionToken');
    }
    const userId = this.cache.get(sessionToken);
    if (userId) {
      _logger.default.verbose('Fetch userId %s of sessionToken %s from Cache', userId, sessionToken);
      return Promise.resolve(userId);
    }
    return userForSessionToken(sessionToken).then(user => {
      _logger.default.verbose('Fetch userId %s of sessionToken %s from Parse', user.id, sessionToken);
      const userId = user.id;
      this.cache.set(sessionToken, userId);
      return Promise.resolve(userId);
    }, error => {
      _logger.default.error('Can not fetch userId for sessionToken %j, error %j', sessionToken, error);
      return Promise.reject(error);
    });
  }
}
exports.SessionTokenCache = SessionTokenCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9kZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2xydUNhY2hlIiwiX2xvZ2dlciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidXNlckZvclNlc3Npb25Ub2tlbiIsInNlc3Npb25Ub2tlbiIsInEiLCJQYXJzZSIsIlF1ZXJ5IiwiZXF1YWxUbyIsImZpcnN0IiwidXNlTWFzdGVyS2V5IiwidGhlbiIsInNlc3Npb24iLCJQcm9taXNlIiwicmVqZWN0IiwiZ2V0IiwiU2Vzc2lvblRva2VuQ2FjaGUiLCJjb25zdHJ1Y3RvciIsInRpbWVvdXQiLCJtYXhTaXplIiwiY2FjaGUiLCJMUlUiLCJtYXgiLCJ0dGwiLCJnZXRVc2VySWQiLCJ1c2VySWQiLCJsb2dnZXIiLCJ2ZXJib3NlIiwicmVzb2x2ZSIsInVzZXIiLCJpZCIsInNldCIsImVycm9yIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXZlUXVlcnkvU2Vzc2lvblRva2VuQ2FjaGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IHsgTFJVQ2FjaGUgYXMgTFJVIH0gZnJvbSAnbHJ1LWNhY2hlJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcblxuZnVuY3Rpb24gdXNlckZvclNlc3Npb25Ub2tlbihzZXNzaW9uVG9rZW4pIHtcbiAgdmFyIHEgPSBuZXcgUGFyc2UuUXVlcnkoJ19TZXNzaW9uJyk7XG4gIHEuZXF1YWxUbygnc2Vzc2lvblRva2VuJywgc2Vzc2lvblRva2VuKTtcbiAgcmV0dXJuIHEuZmlyc3QoeyB1c2VNYXN0ZXJLZXk6IHRydWUgfSkudGhlbihmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdObyBzZXNzaW9uIGZvdW5kIGZvciBzZXNzaW9uIHRva2VuJyk7XG4gICAgfVxuICAgIHJldHVybiBzZXNzaW9uLmdldCgndXNlcicpO1xuICB9KTtcbn1cblxuY2xhc3MgU2Vzc2lvblRva2VuQ2FjaGUge1xuICBjYWNoZTogT2JqZWN0O1xuXG4gIGNvbnN0cnVjdG9yKHRpbWVvdXQ6IG51bWJlciA9IDMwICogMjQgKiA2MCAqIDYwICogMTAwMCwgbWF4U2l6ZTogbnVtYmVyID0gMTAwMDApIHtcbiAgICB0aGlzLmNhY2hlID0gbmV3IExSVSh7XG4gICAgICBtYXg6IG1heFNpemUsXG4gICAgICB0dGw6IHRpbWVvdXQsXG4gICAgfSk7XG4gIH1cblxuICBnZXRVc2VySWQoc2Vzc2lvblRva2VuOiBzdHJpbmcpOiBhbnkge1xuICAgIGlmICghc2Vzc2lvblRva2VuKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0VtcHR5IHNlc3Npb25Ub2tlbicpO1xuICAgIH1cbiAgICBjb25zdCB1c2VySWQgPSB0aGlzLmNhY2hlLmdldChzZXNzaW9uVG9rZW4pO1xuICAgIGlmICh1c2VySWQpIHtcbiAgICAgIGxvZ2dlci52ZXJib3NlKCdGZXRjaCB1c2VySWQgJXMgb2Ygc2Vzc2lvblRva2VuICVzIGZyb20gQ2FjaGUnLCB1c2VySWQsIHNlc3Npb25Ub2tlbik7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVzZXJJZCk7XG4gICAgfVxuICAgIHJldHVybiB1c2VyRm9yU2Vzc2lvblRva2VuKHNlc3Npb25Ub2tlbikudGhlbihcbiAgICAgIHVzZXIgPT4ge1xuICAgICAgICBsb2dnZXIudmVyYm9zZSgnRmV0Y2ggdXNlcklkICVzIG9mIHNlc3Npb25Ub2tlbiAlcyBmcm9tIFBhcnNlJywgdXNlci5pZCwgc2Vzc2lvblRva2VuKTtcbiAgICAgICAgY29uc3QgdXNlcklkID0gdXNlci5pZDtcbiAgICAgICAgdGhpcy5jYWNoZS5zZXQoc2Vzc2lvblRva2VuLCB1c2VySWQpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVzZXJJZCk7XG4gICAgICB9LFxuICAgICAgZXJyb3IgPT4ge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0NhbiBub3QgZmV0Y2ggdXNlcklkIGZvciBzZXNzaW9uVG9rZW4gJWosIGVycm9yICVqJywgc2Vzc2lvblRva2VuLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBTZXNzaW9uVG9rZW5DYWNoZSB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxLQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxTQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBK0IsU0FBQUQsdUJBQUFJLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFFL0IsU0FBU0csbUJBQW1CQSxDQUFDQyxZQUFZLEVBQUU7RUFDekMsSUFBSUMsQ0FBQyxHQUFHLElBQUlDLGFBQUssQ0FBQ0MsS0FBSyxDQUFDLFVBQVUsQ0FBQztFQUNuQ0YsQ0FBQyxDQUFDRyxPQUFPLENBQUMsY0FBYyxFQUFFSixZQUFZLENBQUM7RUFDdkMsT0FBT0MsQ0FBQyxDQUFDSSxLQUFLLENBQUM7SUFBRUMsWUFBWSxFQUFFO0VBQUssQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxVQUFVQyxPQUFPLEVBQUU7SUFDN0QsSUFBSSxDQUFDQSxPQUFPLEVBQUU7TUFDWixPQUFPQyxPQUFPLENBQUNDLE1BQU0sQ0FBQyxvQ0FBb0MsQ0FBQztJQUM3RDtJQUNBLE9BQU9GLE9BQU8sQ0FBQ0csR0FBRyxDQUFDLE1BQU0sQ0FBQztFQUM1QixDQUFDLENBQUM7QUFDSjtBQUVBLE1BQU1DLGlCQUFpQixDQUFDO0VBR3RCQyxXQUFXQSxDQUFDQyxPQUFlLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksRUFBRUMsT0FBZSxHQUFHLEtBQUssRUFBRTtJQUMvRSxJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJQyxrQkFBRyxDQUFDO01BQ25CQyxHQUFHLEVBQUVILE9BQU87TUFDWkksR0FBRyxFQUFFTDtJQUNQLENBQUMsQ0FBQztFQUNKO0VBRUFNLFNBQVNBLENBQUNwQixZQUFvQixFQUFPO0lBQ25DLElBQUksQ0FBQ0EsWUFBWSxFQUFFO01BQ2pCLE9BQU9TLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDLG9CQUFvQixDQUFDO0lBQzdDO0lBQ0EsTUFBTVcsTUFBTSxHQUFHLElBQUksQ0FBQ0wsS0FBSyxDQUFDTCxHQUFHLENBQUNYLFlBQVksQ0FBQztJQUMzQyxJQUFJcUIsTUFBTSxFQUFFO01BQ1ZDLGVBQU0sQ0FBQ0MsT0FBTyxDQUFDLCtDQUErQyxFQUFFRixNQUFNLEVBQUVyQixZQUFZLENBQUM7TUFDckYsT0FBT1MsT0FBTyxDQUFDZSxPQUFPLENBQUNILE1BQU0sQ0FBQztJQUNoQztJQUNBLE9BQU90QixtQkFBbUIsQ0FBQ0MsWUFBWSxDQUFDLENBQUNPLElBQUksQ0FDM0NrQixJQUFJLElBQUk7TUFDTkgsZUFBTSxDQUFDQyxPQUFPLENBQUMsK0NBQStDLEVBQUVFLElBQUksQ0FBQ0MsRUFBRSxFQUFFMUIsWUFBWSxDQUFDO01BQ3RGLE1BQU1xQixNQUFNLEdBQUdJLElBQUksQ0FBQ0MsRUFBRTtNQUN0QixJQUFJLENBQUNWLEtBQUssQ0FBQ1csR0FBRyxDQUFDM0IsWUFBWSxFQUFFcUIsTUFBTSxDQUFDO01BQ3BDLE9BQU9aLE9BQU8sQ0FBQ2UsT0FBTyxDQUFDSCxNQUFNLENBQUM7SUFDaEMsQ0FBQyxFQUNETyxLQUFLLElBQUk7TUFDUE4sZUFBTSxDQUFDTSxLQUFLLENBQUMsb0RBQW9ELEVBQUU1QixZQUFZLEVBQUU0QixLQUFLLENBQUM7TUFDdkYsT0FBT25CLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDa0IsS0FBSyxDQUFDO0lBQzlCLENBQ0YsQ0FBQztFQUNIO0FBQ0Y7QUFBQ0MsT0FBQSxDQUFBakIsaUJBQUEsR0FBQUEsaUJBQUEifQ==